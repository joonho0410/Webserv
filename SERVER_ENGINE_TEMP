void ServerEngine::_M_check_request(Request& req)
{
    std::string page;
    size_t client_body_size = -1;
    std::string url = req.getUrl();
    std::string host = *(req.getHeader().find("Host")->second.begin());
    struct server_config_struct serv_temp;
    struct server_config_struct loca_temp;

    std::string server_name = host.substr(0, host.find_first_of(":", 0));
    std::string ports = host.substr(host.find_first_of(":", 0) + 1);
    // std::cout << "host addr  :" << host.substr(0, host.find_first_of(":", 0)) << std::endl;
    // std::cout << "host port  :" << host.substr(host.find_first_of(":", 0)) << std::endl;
    serv_temp = _M_find_server_and_port(ports, server_name);
    loca_temp = _M_find_location_block(serv_temp, url);
    if (loca_temp.key_and_value.find("client_max_body_size") != loca_temp.key_and_value.end())
    {
        std::string temp;
        temp.clear();
        temp = *(loca_temp.key_and_value.find("client_max_body_size")->second.begin());
        client_body_size = std::atoi(temp.c_str());
        // std::cout << "========= client body size ========== " << std::endl;
        // std::cout << client_body_size << std::endl;
        req.checkBodySize(client_body_size);
    }
    
    if (*loca_temp.key_and_value.find("root") != *loca_temp.key_and_value.end())
    {
        page = (*loca_temp.key_and_value["root"].begin()) + url;
    }

    if (url == "")
    {
        /* index 의 마지막까지 순회하면서 맞는파일이 있는지 확인하도록 수정해야함 */
        page = *loca_temp.key_and_value["root"].begin() + *loca_temp.key_and_value["index"].begin();
    }
    // find url at serverConfig file;
    std::cout << "url : " <<  page << std::endl;
}